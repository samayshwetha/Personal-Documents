ADVANCE SCENARIO IN AUTOMATION

1) Multiple WebElement Handling
   ----------------------------
-> Generally we will use findelement() to capture the required element,But findelement() can return only first matched element 
i.e findelement() is used to deal with single element at a time.

So,if we want to capture all matched element of given locator,than we have to prefer findelements().

-->findelements() returns List<WebElement> and it is used to handle multiple WebElement at a time.

for understanding purpose
-------------------------
for each loop syntax
                       for(Type of data   reference:from where to fetch the data)
                       {
                         }

Ex:-
       for(WebElement wb:allLinks)                                 
       {
         } 
 
Example Program:-
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.edge.EdgeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class HandlingMulitpleWebElements {

	public static void main(String[] args) {
		
		WebDriver driver;
		WebDriverManager.edgedriver().setup();
		driver=new EdgeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.flipkart.com/");
		driver.findElement(By.xpath("//button[contains(.,'✕')]")).click();
		List<WebElement> allLinks = driver.findElements(By.xpath("//a"));//366
	int count=0;
	for(WebElement link:allLinks)//1 //2
	{
		System.out.println(link.getText());//1 //2
		count++;//1 //2-----------------//366
	}
	System.out.println("Total num of links:"+count);
	}

}
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
======================================================================================================
2) Auto Suggestion Handling
   ------------------------
-->After providing some input in search bar we will get search suggestion which is called as 
Autosuggestion.

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

Example 1:-
public class AutoSuggestion {

	public static void main(String[] args) throws Throwable {

		WebDriver driver;
		driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.get("https://www.flipkart.com/");
driver.findElement(By.xpath("//button[contains(.,'✕')]")).click();
		
WebElement data = driver.findElement(By.name("q"));
data.sendKeys("bluetooth");
Thread.sleep(4000);
List<WebElement> suggestion = driver.findElements(By.xpath("//ul[@class='col-12-12 _1MRYA1 _38UFBk']/li"));//1of8 //puma shoes
                     //8
for(WebElement wb:suggestion)
{
	String text = wb.getText();
	if(text.contains(" headset boat"))
	{
		Thread.sleep(2000);
		wb.click();
		break;
}
}
}
}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example2:-

import java.time.Duration;
import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class AutoSuggestionAmazonEx {

	public static void main(String[] args) throws Throwable {
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
driver.get("https://www.amazon.in/");
//driver.manage().window().minimize();
driver.findElement(By.id("twotabsearchtextbox")).sendKeys("puma");
WebElement product = driver.findElement(By.xpath("//span[contains(text(),'slides for men')]"));
String text = product.getText();
Thread.sleep(2000);
List<WebElement> allsuggestion = driver.findElements(By.xpath("//div[@class='left-pane-results-container']/div//span"));
	
	for(WebElement wb:allsuggestion)
	{
	//	String text = wb.getText();
	//	System.out.println(text);
		if(text.equalsIgnoreCase(text))
		{
			wb.click();
			break;
		}
	}
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
Example 3:-

import java.util.List;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class AutoSuggestionEx2 {

	public static void main(String[] args) throws Throwable {
		
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.flipkart.com/");
		driver.findElement(By.xpath("//button[contains(.,'✕')]")).click();
		driver.findElement(By.name("q")).sendKeys("nike");
		Thread.sleep(2000);
		List<WebElement> AllSuggestion = driver.findElements(By.tagName("li"));
		
		for(WebElement webEle:AllSuggestion)
		{
			if(webEle.getText().contains(" sneakers"))
			{
				webEle.click();
				break;
			}
		}
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
======================================================================================================
3) SVG Element Handling
   --------------------
-->SVG stands for scalar vector graphics.
-->Its a older style to create an image in the webpage and this kind of elements are generated by xml language.
(About xml we will discuss in future class,its one of the language like json.)

note**
     Normal approach of xpath is not applicable on svg element.
     we have different xpath for svg elements.

a) Xpath to capture all svg element in webpage
   --------------------------------------------
   //*[name()='svg']

b) Xpath to capture particular svg image
   -------------------------------------
   Example:-  if we have like this when we inspect   <svg class="gb_Ue">
   
   Xpath for above example is::
                           //*[name()='svg' and @class='gb_Ue']

Example:-

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.edge.EdgeDriver;

public class SvgElement {

	public static void main(String[] args) {
		
		WebDriver driver=new EdgeDriver();
		
driver.get("https://www.google.com/");
//svg:-Scalable vector Graphics
//syntax:-//*[name()='svg']
//driver.findElement(By.xpath("//*[name()='svg' and @class='gb_h']")).click();
	driver.findElement(By.cssSelector("svg[class='gb_h'] ")).click();
	}
	}
------------------------------------------------------------------------------------------------------------------------------------------------------------------

======================================================================================================
4) KeyBoard StrokeHandling
   -----------------------
To handle keyboard strokes we have two approach :-
                                                   a) By using keys class.
                                                   b) By using robot class.
a) By using Keys class
   -------------------
Keys is a special class present in selenium library to handle the keyboard action.
-->Keys class can be used in  sendkeys().
lets see how with the few examples..
       
Example in Eclipse

Limitations of Keys class
-------------------------
->It will not support desktop applications.
->It dont support combined keyboard actions.

b)By using robot class
  --------------------
Robot class is a special class present in java.awt.package which can handle any form of keyboard strokes.

There are two non-static methods in robot class--
                                                   1. KeyPress(KeyEvent Class)
                                                   2. KeyRelease(KeyEvent Class)
In KeyEventClass we have static methods .

Example 1:-

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class KeysClass {

	public static void main(String[] args) {
		
		WebDriver driver=new ChromeDriver();
		driver.get("https://demo.actitime.com/login.do");
		//case:-1
		/*driver.findElement(By.id("username")).sendKeys("admin");
		WebElement password = driver.findElement(By.name("pwd"));
		password.sendKeys("manager");
		password.sendKeys(Keys.ENTER);*/
		
		//case:-2
		//driver.findElement(By.id("username")).sendKeys("admin");
		//driver.findElement(By.name("pwd")).sendKeys("manager",Keys.ENTER);
		
		//case:-3
	//	driver.findElement(By.id("username")).sendKeys("admin",Keys.TAB,"manager",Keys.ENTER);
	
	
		//case:-4
		//driver.findElement(By.id("username")).sendKeys("admin",Keys.TAB,"manager",Keys.TAB,Keys.SPACE);
	}}

----------------------------------------------------------------------------------------------------------------------------------------------------------------------

Example 2:-

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

import io.github.bonigarcia.wdm.WebDriverManager;

public class KeysClassEx2 {

	public static void main(String[] args) {
		
		WebDriver driver;
		WebDriverManager.chromedriver().setup();
		driver=new ChromeDriver();
		
		//WebDriver driver=new ChromeDriver();
		driver.get("https://www.flipkart.com/");
		driver.findElement(By.xpath("//button[contains(.,'✕')]")).click();
driver.findElement(By.name("q")).sendKeys("puma",Keys.ENTER);

	}
}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.awt.Robot;
import java.awt.event.KeyEvent;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class RobotClassEx {

	public static void main(String[] args) throws Throwable {
		
		WebDriver driver=new ChromeDriver();
		driver.get("https://demo.actitime.com/login.do");
        driver.findElement(By.id("username")).sendKeys("admin");
    Robot r = new Robot();
    r.keyPress(KeyEvent.VK_CONTROL);
	r.keyPress(KeyEvent.VK_A);
	r.keyRelease(KeyEvent.VK_CONTROL);
	r.keyRelease(KeyEvent.VK_A);
	
	 r.keyPress(KeyEvent.VK_CONTROL);
	 r.keyPress(KeyEvent.VK_C);
	 r.keyRelease(KeyEvent.VK_CONTROL);
	 r.keyRelease(KeyEvent.VK_C);
		
	 r.keyPress(KeyEvent.VK_TAB);
	 r.keyRelease(KeyEvent.VK_TAB);
	 
	 r.keyPress(KeyEvent.VK_CONTROL);
	 r.keyPress(KeyEvent.VK_V);
	 r.keyRelease(KeyEvent.VK_CONTROL);
	 r.keyRelease(KeyEvent.VK_V);
	 
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
ActionClass
----------

Methods of action class
-----------------------
1. MoveToElement(WebElement element)
  ---------------------------------
->This method is used to move the pointer on the given element.

2. perform()
   ---------
->This is mandatory method for every actions class method to get executed.

3. SendKeys(WebElement ele,String input)
   ------------------------------------
->This method is used to pass the input at its respective webelement location by using single method.

4. click(WebElement ele,String input)
   ----------------------------------
->This method is used to perform click action on the webelement which is given as input to this method.

5. build()
   -------
->combining more than one action and executing it in sequence is done by build().

6. Contextclick(WebElement element)
   -------------------------------
->It is used to perform right click on the webelement.


7. dragAndDrop(WebElement dragElement,WebElement dropElement)
   ----------------------------------------------------------
->This method is used for drap and drop scenarios.

8. clickAndHold(WebElement element)
   --------------------------------
->This method is used to perform clickandHold scenarios.

9. release(WebElement element)
   ---------------------------
->This method is used to release the holded elements.

Example:-

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;

public class ActionsClassEx {

	public static void main(String[] args) {
	
		WebDriver driver=new ChromeDriver();
		
		//Example for moveToElement()
		/*driver.get("https://www.amazon.in/");
		WebElement data = driver.findElement(By.xpath("//a[text()='Sell']"));
       Actions act = new Actions(driver);
	   act.moveToElement(data).perform();*/
		
		//Actions methods-----> sendKeys(),perform(),click(),build().
		/*driver.get("https://demo.actitime.com/login.do");
        WebElement UN = driver.findElement(By.id("username"));
        WebElement PW = driver.findElement(By.name("pwd"));
	    WebElement Login = driver.findElement(By.id("loginButton"));
	
	    Actions act = new Actions(driver);
//	    act.sendKeys(UN,"admin").perform();
//	    act.sendKeys(PW,"manager").perform();
//	    act.click(Login).perform();
	    act.sendKeys(UN,"admin").sendKeys(PW,"manager").click(Login).build().perform();*/
		
		//Actions method---->contextClick()
		/*driver.get("https://www.amazon.in/");
		WebElement data = driver.findElement(By.xpath("//a[text()='Sell']"));
		Actions act = new Actions(driver);
		act.contextClick(data).perform();*/
		
		driver.get("https://jqueryui.com/resources/demos/droppable/default.html");
	WebElement drag = driver.findElement(By.id("draggable"));
	WebElement drop = driver.findElement(By.id("droppable"));
	
    Actions act = new Actions(driver);
	/*act.dragAndDrop(drag, drop).perform();*/
    
     act.clickAndHold(drag).perform();
     act.release(drop).perform();
   }

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

ListBox Handling/DropDown Handling:-
We can Handle it by Threee Apporch:
1)By using KeyBoardStrokes
2)By using SelectClass
3)By using Locators

import org.openqa.selenium.By;
import org.openqa.selenium.Keys;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class DropDownByKeysClass {

	public static void main(String[] args) throws Throwable {
       WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
		
driver.get("https://www.facebook.com/");
driver.findElement(By.xpath("//a[text()='Create new account']")).click();
Thread.sleep(2000);
WebElement datelist = driver.findElement(By.id("day"));
Thread.sleep(1000);
datelist.click();
datelist.sendKeys(Keys.ARROW_UP);
datelist.sendKeys(Keys.ARROW_DOWN);
datelist.sendKeys(Keys.ARROW_DOWN);
datelist.sendKeys(Keys.ARROW_DOWN);
datelist.sendKeys(Keys.ARROW_UP);
	
	}

}
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
select class
  ---------------------
->Select is a special class in java which is used for listbox handling and we have to create the 
object of select class to invoke all the methods present in select class.

Methods present in select class
-------------------------------
1. SelectByIndex(int index)
   ------------------------
-> Selects the item present in the list at given index.

2. SelectByValue(String value)
   ---------------------------
-> Selects the item present in the list by using value attribute.

3. SelectByVisibleText(String visibletext)
   ---------------------------------------
->Selects the item present in the list by using visible text of item.


import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.Select;

public class DropDownUsingSelectClass {
public static void main(String[] args) throws Throwable {
	
WebDriver driver=new ChromeDriver();
driver.manage().window().maximize();
		
driver.get("https://www.facebook.com/");
driver.findElement(By.xpath("//a[text()='Create new account']")).click();
Thread.sleep(2000);

 /*WebElement datelist = driver.findElement(By.id("day"));
 //SelectByIndex()
       Select sel = new Select(datelist);
       sel.selectByIndex(8);
       
       WebElement monthlist = driver.findElement(By.id("month"));
       Select sele = new Select(monthlist);
       sele.selectByIndex(3);*/
	
       //SelectByValue()
    /*   WebElement datelist = driver.findElement(By.id("day"));
      Select sel = new Select(datelist);
      sel.selectByValue("10");
      
      WebElement monthlist = driver.findElement(By.id("month"));
      Select sele = new Select(monthlist);
	 sele.selectByValue("8");*/

  //SelectByVisibleText()
WebElement datelist = driver.findElement(By.id("day"));
Select sel = new Select(datelist);
sel.selectByVisibleText("15");

WebElement monthlist = driver.findElement(By.id("month"));
Select sele = new Select(monthlist);
sele.selectByVisibleText("Sep");

WebElement yearlist = driver.findElement(By.id("year"));
Select select = new Select(yearlist);
select.selectByVisibleText("2002");
	
	}

}  
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class DropDownUsingXapth {

	public static void main(String[] args) throws Throwable {
		WebDriver driver=new ChromeDriver();
		driver.manage().window().maximize();
				
		driver.get("https://www.facebook.com/");
		driver.findElement(By.xpath("//a[text()='Create new account']")).click();
		Thread.sleep(2000);
       driver.findElement(By.id("day"));
	  	
       driver.findElement(By.xpath("//option[text()='10']")).click();
		}
	}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------

Synchronization Handling
------------------------

In real time, automation tool speed is much faster than application speed.Due to this speed difference we will get NoSuchElementException.

Hence Here automation tool speed is not matched with application speed by using wait() statement is called as Synchronization Handling.

Types of wait statement used in Automation.
1)Java wait
2)Implicit wait
3)Explicit wait
4)Fluent wait

1)Java wait:- In java,Thread.sleep() is a wait statment.
In will pause entire execution for given period of the time.
Here time need to be in miliseconds.

Limitations:-
-As per Automation coding standards, use of Thread.sleep() is not recomanded beacause,its a dead wait().
-Here we cant predict exact amount of wait time.
-If we give more time it makes automation slower and if we give less time then chances of failure is more
-As it need to be use multiple time then lenght of code increases.

2)ImplicitWait:-This wait will wait for elements to be loaded in GUI.
if Element is loaded with in a time then it will not wait for remaining seconds,immediately it allows webdriver to perfrom next action.
-if elements is not loaded within a time then it will throw NoSuchElementException.
-Implicit wait is applicable on all the elements in script ie its applicable on findelement and findelements.
-It means implicit wait need to be declare only once in a script after launching browser.
Syntax:-
Option opt=driver.manage();
TimeOuts time=opt.timeouts();
time.implicitlywait(Duration.OfSeconds(10));

** driver.manage().timeouts.implicitlywait(Duration.OfSeconds(10));

3)Expicit wait:- Explicit wait is wait for particular condition to be satisfy.
-Default polling time for explicit wait is 500ms or 0.5sec.
-Polling time is nothing  but a time interval. where explicit wait will check perticular condition is satisfied or not.
-If condition satisfy within a time then it will not wait for remaining seconds and allow webdriver to perform next action but if condition is not satisfy with in a time then we will get TimeOutException.
-Explicit wait need to be declare n number time based on requriement.
Syntax:-
WebDriverWait wait=new WebDriverWait(driver,Duration.OfSecond());
wait.until(ExpectedCondition,Element);

4)FluentWait:- This is exactly same like explicit wait
-It will wait for perticular condition to be satisfy.
-In Explicit wait polling time is by itseft 0.5sec (fixed).
But in Fluent wait we can customized the polling time.

Example:-

import java.time.Duration;
import java.util.concurrent.TimeUnit;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.FluentWait;
public class WaitsEx {

	public static void main(String[] args) {
		
		WebDriver driver=new ChromeDriver();
		
		//syntax:-
	/*	Options opt = driver.manage();
		Timeouts time = opt.timeouts();
		time.implicitlyWait(20,TimeUnit.SECONDS);*/
		
		//version-3
		driver.manage().timeouts().implicitlyWait(20,TimeUnit.SECONDS);
		//version-4
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
		driver.get("https://demo.actitime.com/login.do");

		driver.findElement(By.id("username")).sendKeys("admin");
		driver.findElement(By.name("pwd")).sendKeys("manager");
		
		WebElement login = driver.findElement(By.className("initial"));
		
	/*-	WebDriverWait wait1 = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait1.until(ExpectedConditions.elementToBeClickable(login));
		login.click();//timeoutExecption
		
		WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(10));
		wait.until(ExpectedConditions.titleContains("Enter Time-Track"));*/
		
		FluentWait wait2 = new FluentWait(driver);
		wait2.pollingEvery(Duration.ofSeconds(10));
		wait2.until(ExpectedConditions.elementToBeClickable(login));
	}

}
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Scroll Handling

import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

public class ScrolingByJavaScriptExecutor {

	public static void main(String[] args) throws Throwable {
		
		WebDriver driver=new ChromeDriver();
		/*driver.get("https://www.amazon.in/");
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(Duration.ofSeconds(10));
	JavascriptExecutor js = (JavascriptExecutor)driver;

		for(int i=0;i<3;i++)
		{
			js.executeScript("window.scrollBy(0,500)");
			Thread.sleep(1000);
		}
		for(int i=0;i<3;i++)
		{
			js.executeScript("window.scrollBy(0,-500)");
			Thread.sleep(1000);
		}*/
	
		driver.get("https://www.facebook.com/");
		WebElement ele = driver.findElement(By.xpath("//a[text()='Help']"));
		JavascriptExecutor js = (JavascriptExecutor)driver;
		js.executeScript("arguments[0].scrollIntoView()",ele);
		ele.click();
	}

}
----------------------------------------------------------------------------------------------------------------------------------------------------------------------

import java.awt.Robot;
import java.awt.event.KeyEvent;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;

public class SCrollingByRobot {

	public static void main(String[] args) throws Throwable {
		
		WebDriver driver=new ChromeDriver();
		driver.get("https://www.amazon.in/");
		driver.manage().window().maximize();
		
		Robot r = new Robot();
	r.keyPress(KeyEvent.VK_PAGE_DOWN);
	r.keyRelease(KeyEvent.VK_PAGE_DOWN);
	Thread.sleep(2000);
	
	r.keyPress(KeyEvent.VK_PAGE_DOWN);
	r.keyRelease(KeyEvent.VK_PAGE_DOWN);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_DOWN);
	r.keyRelease(KeyEvent.VK_PAGE_DOWN);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_DOWN);
	r.keyRelease(KeyEvent.VK_PAGE_DOWN);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_DOWN);
	r.keyRelease(KeyEvent.VK_PAGE_DOWN);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_UP);
	r.keyRelease(KeyEvent.VK_PAGE_UP);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_UP);
	r.keyRelease(KeyEvent.VK_PAGE_UP);
	
	Thread.sleep(2000);
	r.keyPress(KeyEvent.VK_PAGE_UP);
	r.keyRelease(KeyEvent.VK_PAGE_UP);
	}

}
---------------------------------------------------------------------------------------------------------------------------------------------------------------------